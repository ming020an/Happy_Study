===============================系统文件IO===============================
一、概述:
	
二、常用函数
	1、open函数
		1)头文件
			#include <sys/types.h>	--->包含基本数据类型
			#include <sys/stat.h>	--->包含文件状态
			#include <fcntl.h>		--->包含文件控制定义
		2)函数原型
			int open(const char *pathname, int flags);
			int open(const char *pathname, int flags, mode_t mode);
		3)参数
			pathname	--->所要打开的文件的路径名
			flags		--->打开方式,常用的有以下几种
				O_RDONLY	--->只读
				O_WRONLY	--->只写
				O_RDWR		--->读写
				O_EXCL		--->检测文件是否存在,如果存在则函数返回错误
				O_TRUNC		--->如果文件存在则清空文件
				O_APPEND	--->追加写入
				
			mode		--->设置文件权限
		4)返回值
			成功		--->文件描述符(大于0的最小整数)
			失败		--->-1
		5)功能
			
	2、	read函数
		1)头文件
			#include <unistd.h>
		2)函数原型
			 ssize_t read(int fd, void *buf, size_t count);
		3)参数
			fd			--->open函数返回的文件描述符,从这个文件当中读取数据
			buf			--->保存读取数据的缓冲区地址(一般使用数组名)
			count		--->所要读取的数据字节大小
		4)返回值
			成功		--->真实读取数据的字节大小
			失败		--->-1
		5)功能
			从fd中读取ssize_t字节数据，将其保存到buf中,读取的数据有可能少于count
			
	3、	write函数
		1)头文件
			#include <unistd.h>
		2)函数原型
			 ssize_t write(int fd, const void *buf, size_t count);
		3)参数
			fd			--->open函数返回的文件描述符，将数据写入这个文件
			buf			--->保存写入数据的缓冲区地址(一般使用数组名)
			count		--->所要写入的数据字节大小
		4)返回值
			成功		--->真实写入数据的字节大小
			失败		--->-1
		5)功能
			从buf中写入count字节数据到fd中，写入的数据有可能少于count
			
	4、	close函数
		1)头文件
			#include <unistd.h>
		2)函数原型
			int close(int fd);
		3)参数
			fd			--->open函数返回的文件描述符
		4)返回值
			成功		--->0
			失败		--->-1
		5)功能
			关闭前面打开的文件
			
	5、	lseek函数
		1)头文件
			#include <sys/types.h>
			#include <unistd.h>
		2)函数原型
			off_t lseek(int fd, off_t offset, int whence);
		3)参数
			fd				--->open函数返回的文件描述符
			offset			--->指定偏移量
			whence			--->指定偏移位置,有以下三种模式	
				SEEK_SET	--->文件开始处设置偏移量
				SEEK_CUR	--->从当前文件偏移量的位置设置偏移量
				SEEK_END	--->从文件结尾处设置偏移量
		4)返回值
			成功			--->返回偏移的长度
			失败			--->-1
		5)功能
			对文件fd进行偏移量偏移(不指定O_APPEND方式则文件偏移量默认是0)
			从whence这个位置开始偏移offset长度
			
===============================标准文件IO===============================	
待续中...		
