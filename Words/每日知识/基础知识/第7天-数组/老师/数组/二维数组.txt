0.问题引入
	定义4个int型的数组 : int a[4];
		typeof(a) -----> int[4]    a是一个具有4个int型数据的数组
	定义3个同样的数组呢??
		typeof(a) b[3]; 
		=> int[4] b[3];
		==> int b[3][4];
		
		含义: b是一个数组,具有3个元素: b[0]   b[1]  b[2]
			 每一个元素都含有4个元素(int):
				b[0]  有4个int : b[0][0]  b[0][1] b[0][2] b[0][3]
				b[1]  有4个int : b[1][0]  ....
				b[2]  有4个 int :b[2][0]  .... 
				
				
	从上面可以看出,b是一个二维数组
		二维数组实在上就是一个一维数组,数组的每个元素都是一个一维数组
		
		
1.二维数组的定义
	格式: 
		类型说明符  数组名[行数量][列数量];
		
		比如: int a[3][4];   //a是一个具有三行每行4个int的数组
			  float b[5][2]; //b是一个具有5行每行2个float的数组
			  
	二维数组的引用:
		数组名[行下标][列下标];
		
		比如: int a[3][4];
			a[0][2]  ---> 表示a这个数组第0行第2个元素
				
		数学矩阵: 
		a:				第零列     第一列      第二列    第三列
						  0          1            2         3
			第零行 0    a[0][0]    a[0][1]      a[0][2]   a[0][3]
			第一行 1       
			第二行 2
	
	二维数组在内存中的存储形式:
		二维数组的访问是先访问 行,访问完第一行再访问第二行
		二维数组在内存中的存放形式:用一块连续的存储空间,
			从低地址到高地址,依次存放数组的每一个成员
			
	
	*** 数组在内存中的存放:
		用一块连续的存储空间,从低地址到高地址依次存放数组的每一个成员!!
		
		
	二维数组的初始化:用{}
		int a[3][4] = {
						{1,2,3,4},
						{5,6,7,8},
						{9,10,11,12}
					  };
					  
		(1):分行赋值
				如上面的初始化赋值
				
		(2):不分行赋值:在进行数组初始化时,数组元素的赋值从 [0][0]的开始
				先赋值第一行,再赋值第二行........
				
			比如: int a[3][4] = {0,1,2,3,4,5,6,7};
					a[0][0] = 0;
					a[0][1] = 1;
					.....
					a[1][3] = 7;
					a[2][0] = 0;
					~
					a[2][3] = 0;
		(3):部分赋值:按行部分赋值
			int a[3][4] = {
							{1,2},
							{3},
							{4,5}
						};
				a[0][0] = 1;
				a[0][2] = 0;
				a[2][1] = 5; 
			
			int a[3][4] = {
							{1,2},
							{},
							{4,5}
							};
		
		(4):全部赋值时,可以省略行数, ***但不能省略列数
			比如: int a[][2] = {1,2,3,4,5,6,7,8,9,10};
		
		
		
		
		******  数组名[行][列];	  
				数组成员与普通变量一致:左值,右值
				int a[10][10];
				a[3][4] = 1024;
				b = a[3][4];
				
	练习:
			1.定义一个二维数组,从键盘获取数据,并打印
				int a[3][4];
				scanf("%d",a[0][0]);
				scanf("%d",a[0][1]);
				........
				scanf("%d",a[2][3]);
				
				=====> i 表示行下标变化 [0,2]
					   j 表示列下标变化 [0,3]
					两层for
						
			2.矩阵变换:	(行列注意了啊啊啊啊啊啊!!!!!)
				比如: int a[2][3]  ====>  b[3][2]
				
					1 2 3                  1 4
					4 5 6                  2 5
					                       3 6 
										   
				参考 第1题的两层for
				
			3.求山顶的个数
				"山顶":  上下左右它最高,就是山顶
					  ?:
					上   (i-1)?i-1
					下   i+1
					左   j-i
					右   j+1
				
			4."鞍点": 行最大&&列最小 
					可能没有
				x_max  ==   y_min  == 本身  ----->鞍点
				a[1][2]    a[0][2]  a[2][2]    a[3][2] ...
				
				
字符数组:
	字符数组:也是个数组,只是数组的元素是一个个的字符
	***	char a[] = {'a','b','c','d'};    
							typeof(a)  ===> a是一个具有4个char数据的数组
							sizeof(a) ===> 4
							
		char a[] = {"abcd"};
							sizeof(a) ===> 5?
			""引起来的是字符串,字符串末尾有一个结束符'\0' 占一个字节
			
			
			
			
	win+r  ----> \\192.168.3.99