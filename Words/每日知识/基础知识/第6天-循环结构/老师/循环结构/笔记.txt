0、问题引入
	sum = 1+2+3+4+...+100;
	i = 0;
	sum = 0;
	top1:
		i++;// 1
		sum += i; // 0 + 1
		
	top2:
		i++; //2
		sum += i; // 0 + 1 + 2
		
	.....
	
	top100:
		i++; //100
		sum += i; // 0 + 1 + 2 + 3 + ... +100
		
	这么写程序不太现实
	每一步都在重复做 
		i++;
		sum += i;
	计算机有没有办法帮我们重复执行100次上述语句呢？？？
	===》循环
		实质：重复

​		

#### 1、循环结构

​	(1) goto 与 if相结合构成循环
​			goto本身不是一个循环结构
​			goto是一个无条件跳转
​		goto 标号;
​			***标号也是一个标示符，要符合c语言标示符命名规范
​			标示符：字母（大小写） 数字 和 _ 组成，并且，必须以字母 或 _ 开头
​		goto:表示跳转到标示符位置取执行语句
​		
​	(2) do  while 循环
​	(3) while
​	(4) for

​		

#### 2、goto循环

​	语法：
​	toop:
​		........
​		goto toop;
​		
​	含义：
​	标示循环起点
​		........（语句）
​		跳转到标示循环起点;
​		

	toop 标记循环起始的地址，是一个标示符
	一般来说，跳转标记要定格写（在标记前不能有除空白符外的其它符号）
	
	比如：
	
	lable：
		int i = 0;
		i++;
		printf("%d",i);
		goto lable;
		
	return 0;
	这个程序会一直输出111111111111111...........


​		
​	死循环：循环到死都不结束的循环，
​	一般程序中要避免使用死循环
​	
	goto单独情况下不被用于循环，因为goto是一个无条件跳转
		单独使用goto构成的循环都是“死循环”
		所有 goto构成的循环要跟if在一起
		
		比如：
	lable:
		.....
		if()
		{
			goto lable; //goto起到跳转作用
		}
		
	练习：利用goto 实现 1+2+3+...+100


​	
​	CTRL+c可以强制结束程序运行
​	****************************************************************
​	****************************************************************
​	NOTE:
​		结构化程序设计者不提倡使用goto,并非是goto本身有问题
​		goto语句本身毫无问题,有问题的是用goto的那个"你"
​		乱用goto很可能导致程序的逻辑混乱(针对的是"你")

​		

#### 3.while

​	语法:
​		while(表达式)
​		{
​			语句;
​		}
​	
​	含义:
​		while(当)"表达式"的值为真(非0),就执行语句
​			执行完后,在回到前面,继续判断"表达式"的值
​			如果表达式的值为真,就执行语句
​			执行完后,在回到前面............
​			直到"表达式"的值为0(假)
​			

	表达式:c语言中任意一个正确的表达式,都可以,常量也可以
		比如: while(1) ---->死循环
			  while(a>b && a<c || b<c)
			  while(a = b) //b是不是非0
			  while(a == b)// a是不是等于b
			  
	语句:
		单语句:只有一个;的语句,就是单语句
		复合语句:{;;;;;;;}/if/while/do while/for/switch.....
	
	编程建议:无论while后面有没有语句,都打上{},表明while的"管辖范围"
	
	练习:
		1.利用while 和 sleep做一个"定时炸弹" (到了设定的时间,就打印"boom")
			int i = 10; 
			while(i) //i非0(真)
			{
				i--;
				sleep(1);
			}
			printf("boom\n");
			
		2.利用while求1-100偶数的和
			int i = 0;
			int sum = 0;
			while(i<100)
			{
				i++;
				if(i%2 == 0)
				{
					sum += i;
				}
			}
			
		3.逆序输出一个整数的每个"数学位"(个十百千万....)
			比如:输入 1234
				输出结果是 4 3 2 1
				
			热情提示:对10取余可以得到个位
				     对10取整可以去掉个位
				
			scanf("%d",&x);
			
			i = x%10; //取出个位
			printf("%d ",i);//输出个位
			x = x/10; //x去掉了个位
			
			i = x%10; //取出个位(相当于原来x的十位)
			printf....
			x = x/10;
			
			....
			....
			x == 0


​		
​		
​		scanf("%d",&x); //123456789
​		while(x)
​		{
​			i = x%10;
​			printf("%d ",i):
​			x = x/10;
​		}


​		
​		第3改:将输入的整数倒叙赋值给另一个整数
​		比如:输入a:123456789
​				 b:987654321


​				 
​		思路: (((9*10+8)*10+7)*10+6)*10+5......
​				n   取出的数i   赋值完后 n = n*10+i;
​		1:      0      9        0*10+9
​		2:      9      8		9*10+8
​		3:   9*10+8    7      (9*10+8)*10+7
​		......
​		(穷举/列举)
​				
		int n = 0;
		scanf("%d",&x); //12
		while(x)
		{
			i = x%10;//取出个位
			printf("%d ",i):
			n = n*10 + i;
			x = x/10;
		}
		
	比如:
		输入一个整数n, 打印出一行有m个*号的矩阵
		
		n/m*m + n%m = n;
		3/2*2 + 3%2 = 3;
		
		int m,n,i=1;
		scanf("%d%d",&n,&m);
		while(i<=n)
		{
			if(i%m !=0 )
			{
				printf("*");
			}
			else
			{
				printf("\n");
			}
			i++;
		}

​		

#### 4.do while

​	语法:
​		do
​		{
​			语句
​		}while(表达式);
​		
​	含义:
​		先执行"语句",在判断"表达式"的值
​		为真:返回继续执行"语句",然后在判断"表达式"的值
​		为真:返回继续执行.......
​		直到表达式的值为 0 (为假)结束循环
​		

	do while 与 while 的差别
		do while:先执行语句在判断表达式,也就是说 至少 执行一次语句
		while:先判断表达式 再 执行 语句
		
	一般我们将在循环中执行的语句称为循环主体(语句)
	
	表达式:c语言中任意一个正确的表达式
	语句:
		单语句:只有一个;的语句
		复合语句:{}  if while do...while .........


​		
​	编程建议:无论有没有语句被do while 执行,都加上{}
​		
		int i = 0;
		int sum = 0;
		do
			i++;
			sum += i;
		while(i<100);
				
		printf("%d\n",sum);


​		
​	利用do while 求 n! (n从键盘输入)
​	n! = n*(n-1)*(n-2)*(n-3)*.....*1;

​	

#### 5.for循环

​	语法:
​		for(表达式1;表达式2;表达式3)
​		{
​			循环主体语句;
​		}
​		
​	含义:
​		先执行"表达式1",判断"表达式2"
​		如果"表达式2"为真,执行循环主体
​		然后执行"表达式3",再判断"表达式2"
​		如果"表达式2"为真,执行循环主体
​		然后执行表达式3,在判断........
​		.............
​		直到"表达式2"为假,结束循环
​		

	for语句中,三个表达式都可以省略,
	如果三个表达式都省略的话,死循环
		for(;;)      for(;1;)
		{			 {
				死循环		
		}			 }


​	
​	表达式1 表达式2 表达式3:可以是c语言中任意一个合法的表达式
​	语句:
​		单语句:只有一个;号的语句
​		复合语句:{}/if/while......
​		
	在for中:
		表达式1:是初始化语句,"初始条件",只在最开始的时候执行唯一一次
		表达式2:"判断条件"

​		

#### 6.break和continue

​	break:用来跳出所属的 循环 或者 switch	
​		只能跳出一层循环
​	
​		while(1)
​		{
​			printf("*********\n");
​			break;
​			printf("888888888\n");
​		}
​	

	continue:结束"循环主体语句"的执行,再次判断"表达式"
	
		while(1)
		{
			printf("*********\n");
			continue;
			printf("888888888\n");
		}


	练习:
		0.找出所有的水仙花数
			水仙花数是一个三位数:个位的立方 + 十位的立方 + 百位的立方 = 该数
			比如 if(100 == 1*1*1 + 0*0*0 + 0*0*0)
					yes
				 if(101 == 1*1* + 0*0*0 + 1*1*0)
					yes
				.....
				if(999 == 9*9*9 + 9*9*9 + 9*9*9)
					yes
	
		1.从键盘获取两个数,求最大公约数和最小公倍数
			最大公约数: 两个数能整除的数中最大的一个
				(1)穷举法
					  [2,min(m,n)]
				(2)辗转相除法
					c = max(m,n)/min(m,n);
					if(c == 0)
					{
						
					}
					else
					{
						max(m,n) = min(m,n);
						min(m,n) = c;
						回去再判断
					}
				(3)相减法
					if(a > b)  a = a-b;
					if(b > a)  b = b - a;
					if(a == b) yes zhaodao le
					
			最小公倍数: 能整除两个数中最小的一个
				m*n/最大公约数 = 最小公倍数
			
		2.从键盘输入两个数   n 和 a
		
			求 Sn = a + aa + aaa + aaaa + ... + n个a
			比如 输入 5 2
				Sn = 2 + 22 + 222 + 2222 + 22222 
				
			温馨提示:(1):求第i项的值
					 (2):求第i项的和
					 
		*3.求1000以内的完数(完美的数):除本身外所有因数的和等于本身
			比如 6 = 1*6 = 2*3;
				6 = 1+2+3;
				
		*4.判断一个数是不是素(质)数:除1和本身外,没有其它因数	