栈:先进后出,后进先出
	栈stack:限定只能在表尾进行插入和删除操作的线性表
	Last in first out 后进先出
	
	栈顶:top 允许插入和删除的一端
	栈尾:bottom 不允许操作的一端
	
	(1)顺序栈
		顺序栈的元素在物理上是连续的(存储地址是连续的)
		struct seqstack
		{
			ElemType Elem[MAX]; //存放栈中元素的数组
			int top; //栈顶的下标
		};//用来表示一个栈
		
	(2)链序栈
		链序栈的元素在物理上是不连续的(限定操作的双向带头结点链表)
		struct node
		{
			ElemType data;
			struct node *next;
			struct node *prev;
		}; //栈元素结点
		
		struct linkedstack
		{
			int length;   //栈中元素的个数
			struct node * bottom; //指向栈底的指针
			struct node * top; //指向栈顶的指针
		};

队列:先进先出的特殊线性表,只允许在一端执行插入,在另一端执行删除
	队尾 允许插入的一端被称为队尾 (尾插法)
	队头 允许删除的一端被称为队头 (砍头法)
	
	(1)顺序队列
		队列中的元素在存储时,地址是连续的
		struct seqQueue
		{
			Elemtype data[MAX];
			int front; //队头下标
			int rear; //队尾下标
			int num; //队列中元素个数
		};
		
	(2)链序队列
		队列中的元素在存储时,地址不要求连续
		struct node
		{
			ElemType data;
			struct node *next;
			struct node *prev;
		};
		
		struct linkedqueue
		{
			struct node * front; //指向队列头的指针
			struct node * rear; //指向队列尾的指针
			int num; //队列中元素个数
		}; //头结点结构体,用来维护一个队列

	
InitQueue
DestroyQueue
ClearQueue
QueueEmpty
QueueLength
GetFront
EnQueue
DeQueue


链表(数组) 跟 栈和队列的区别
	链表(数组)是想删哪里就删哪里,想插哪里就插哪里
	
	栈:插入和删除只能在一端进行(栈顶进行)
	
	队列:插入只能在一端进行,而删除必须在另一端进行