0.问题引入
	int a = 10;
	a =100;
	int b = a;
	======>通过变量名访问对应的地址空间的方式,被称为直接访问
	
	如果说,我已经直到一个变量对应的地址了,那我能不能通过这个地址
	来访问这个存储空间的值呢????
	====>可以
	这种通过地址来访问存储空间内容的方式,就是间接访问
	地址是不是也需要保存呢????
	肯定是的啦啦啦啦
	
1.指针的概念
	地址:分配给每个变量的存储单元都是有编号的
		那么这个编号就是地址(门牌号)
	
	在c语言中,指针的概念和地址相差不多,您可以认为指针就是一个地址
	
	一个变量的地址,就可以称为该变量的指针
	间接访问:其实就是通过变量的地址取访问变量存储空间的内容
	地址到底要怎么保存呢??? ====> 地址是一个编号 ---->数据
	

2.指针变量
	定义:
		变量类型  变量名; int a = 10;
		
	指针变量存放的是 一个地址!!!!

	int * p = &a;
	
	指针变量的类型由谁决定呢???
		int a = 10; //要保存a的地址
		int *p = &a;
		
		char b = 't'; //要保存b的地址
		char *q = &b;
		
		====>指针变量的类型 由 指向对象的数据类型决定
		
****指针的定义格式为:
		指向类型 * 变量名;
		"指向":如果 p 保存了 a的地址,那么我们就说p指向a的!
		"指向类型":如果p是指向a的,那么指向类型就是a的类型
		
	int k = 5201314;
		此时: w = &k;
		
		那么我们可以说 w 保存了k的地址
		也可以说 w 指向 k
		而 w 的指向类型是 k的类型
		
		那么我们如何定义这个 w
		指向类型 * w;
		typeof(k) * w;  // int *w;
		
	指向类型还有一个重要的作用是决定了指针加减时的步长
	p + 1 //指针p 向后移动一步
		步长:指针移动一步需要移动多少个字节
		
		
	int a[4];
	typeof(a) *p;  //typeof(a)  ---> int[4] --->4*4个字节 int[4] *p;
	p+1移动了多少个字节呢???  16
	
	short a;
	typeof(a) *p;
	p+1; 移动了2个字节
	
3.关于指针的两个操作符(指针运算符)
	&:取地址符
		&a:取变量a的地址
	*:指向运算符(取值)
		*地址 :指向该地址对应的那个变量(变量的右值or左值)
		
		int a = 5;
		int *p;
		p = &a;//p指向a,p保存a的地址
		*p = 10086;
		
	--------------
		a = 5;
		p = &a;
		*p = 5;
		*p = *(&a); ===> *p == a;
			====> *&是可以抵消的
	----------------
	
	一个变量的类型怎么看,可用定义时这个变量前面的东东看出来
		int a; ---> a变量的类型就是 int
		typeof(a); ---->可以求出变量的类型
		
		*** a;
		
		int *p;
		typeof(p)------>指向一个 int型的指针
		
		
		char *t;
		typeof(t)---->指向一个 char型的指针
		
		sizeof(t)?    //指针的大小固定是机器字长
		sizeof(*t)?  //指针总是指向一个地址(首地址)
		
		
	写一个函数,交换两个数的位置
		a = 3;
		b = 4;
		
		====>
			a = 4;
			b = 3;
	要求不能用全局变量
	//int a;
	//int b;
	
	void swap(int *p,int *q)
	{
		int t;
		t = *p; // 把 *p (a) 的值赋值给t
		*p = *q; // *p左值   *q右值
		*q = t; //*q 左值
	}
	
	int main(void)
	{
		a = 3;
		b = 4;
		swap(&a,&b);
		printf("a:%d b:%d\n",a,b);
	}
	这里的参数传递就相当于  int　*p = &a,int *q =&b
	
	提示1:
		int a = 5;
		int *p = &a;
		*p = 1024;  ----> a == ?
		
	提示2:
		参数的传递,其是就是一个赋值过程
	
	
	
4.指针在作为参数传递时,传值调用
	如果在一个函数内要访问外部函数的一个局部变量
	这个外部函数的局部变量作用域(有效)只有在该外部函数中
	这个时候只能通过外部函数的地址取访问
	
**** 一个程序在执行过程中,使用的是同一个内存,所有程序中的所有地址
	只要直到地址编号就能在任意地方访问了!!!!!
	
	请问:给变量 int a; 赋值有几种方式
		直接赋值:  a = 1234;
		间接赋值: 通过变量的地址给变量赋值
			int *p = &a;
			*p = 10086;
			
			
	练习:写一个函数,帮我实现下列功能
	
	int main(void)
	{
		char a[100] = {'a','b','c','d','e'};
		char b[20] = "hello world!";
		/*
		for()
		{
			a[i] = b[i];
		}
		*/
		my_strcpy(a,b);
		printf("a:%s",a); //----> hello world!
	}
	
	
	=====>分析函数功能:实现将一个字符串拷贝到另一个字符串中
	
	方法一:
	my_strcpy(char p[],char q[])
	{
		int i = strlen(q);
		for(i=0;i<strlen(q);i++)
		{
			p[i] = q[i];
		}
	}
	
	
	方法二:
	my_strcpy(char *p,char *q)
	{
		/**
		*p = *q;  //把q的第一个字母赋值给了 p的第一个地址
		
		*(p+1) = *(q+1);//把q的第二个字符赋值给了 p的第二个地址
		
		......
		if(*q == '\0')
		*/
		while(*q != '\0')  //*q != 0
		{
			*p  = *q;
			p++;
			q++;
		}
		
	}

****指针做参数传递时,传递过去的是指针指向的首地址
	此时,改变形参的值(*形参)就改变了实参的值
	
	
	
	char *p;
	p 是一个指向一个char型地址的指针  ---->指针 
		打印p 
			用%p  打印的是p指针指向的地址编号(十六进制数)  
			  %s  打印从p指向的那个char型地址开始,后面的一串char,直到'\0'
	*p:p指向的那个地址的变量(左值or右值)
	
	
5.数组元素与指针
	数组的元素与普通变量一致,每个数组元素都有自己的地址
	每个数组元素都有自己的左值  右值
	
	数组名可以看成是一个指针(常量指针),指向数组的第一个元素的地址(首地址)
	设 int a[100];
	想要一个指针保存a[0]的地址
	int *p = a;
	typeof(a[0]) * p = &a[0]; //int *p = &a[0];
	
	====>p = &a[0];
		==>*p == a[0]; 
		
	如何用 p 来指向数组中 第i个元素的地址
	假设p是 0x123456
	p+i -----> 0x123456 + i*4 ---->&a[i] == 0x123456+i*4
	
	指针的加减:并不是单纯的 加减
			指针的加减是加减的步长
		int型的步长是 4个字节
	
		
	
	